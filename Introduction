## 📌 Introduction
DO280 is a **Red Hat OpenShift Administration** course that covers essential skills required to configure, manage, and operate an OpenShift cluster. This README serves as a **comprehensive guide** for key concepts, commands, and workflows.

## 🏗 Kubernetes and OpenShift Overview
- **🔹 Kubernetes** is a container orchestration platform that automates deployment, scaling, and operations of containerized applications.
- **🔹 OpenShift** is a **Kubernetes distribution by Red Hat** that adds security, developer tools, and enterprise-grade features.

## ⚡ Imperative vs Declarative Commands
### 🛠️ Imperative Workflow
- **Direct commands** to configure and modify resources.
- **Example:**
  ```sh
  oc new-app my-app --image=my-image
  oc set env deployment/my-app ENV_VAR=value
  ```
- ✅ Pros: Quick for testing and debugging.
- ❌ Cons: Hard to track changes, lacks version control.

### 📜 Declarative Workflow
- Uses **YAML/JSON manifest files** to define the desired state of resources.
- **Example:**
  ```yaml
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: my-app
  spec:
    replicas: 2
    selector:
      matchLabels:
        app: my-app
    template:
      metadata:
        labels:
          app: my-app
      spec:
        containers:
        - name: my-container
          image: my-image
  ```
- Apply changes:
  ```sh
  oc apply -f deployment.yaml
  ```
- ✅ Pros: Easy to track in Git, supports **GitOps** and automation.

## 🚀 Creating and Managing Applications
### 📦 Deploy an Application
- **Using Imperative:**
  ```sh
  oc new-app quay.io/redhattraining/hello-world-nginx:v1.0
  ```
- **Using Declarative:**
  ```sh
  oc apply -f my-app-deployment.yaml
  ```

### 🌎 Exposing Services
- **Expose a service to external access:**
  ```sh
  oc expose deployment my-app --port=8080 --type=NodePort
  oc expose service my-app --hostname=myapp.example.com
  ```

### 📈 Scaling Applications
- **Scale up/down the number of replicas:**
  ```sh
  oc scale deployment my-app --replicas=3
  ```

### 🔄 Updating Resources
- **Update the container image:**
  ```sh
  oc set image deployment/my-app my-container=my-new-image
  ```
- **Apply updates using declarative:**
  ```sh
  oc apply -f updated-deployment.yaml
  ```

## 🔍 YAML Validation and Debugging
- **Validate YAML syntax before applying changes:**
  ```sh
  oc apply -f my-deployment.yaml --dry-run=server --validate=true
  ```
- **Check logs of a running pod:**
  ```sh
  oc logs pod-name
  ```
- **Describe a resource to check its status:**
  ```sh
  oc describe deployment my-app
  ```

## 🔄 GitOps and CI/CD Integration
- 📌 **Store YAML manifests in a Git repository.**
- 📌 **Automate deployments using ArgoCD or Tekton.**
- 📌 **Rollback changes using Git versioning.**



